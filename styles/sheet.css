.elemental-circle-container {
  position: relative;
  width: 400px;
  height: 400px;
  margin: 100px auto 0 auto;
  --theme-color: #00ffff; /* Default theme color */
}

/* Gradient accent for the Update button */
#updateNodesButton {
  background: linear-gradient(45deg, var(--theme-color), color-mix(in srgb, var(--theme-color) 80%, white));
  border: none;
  padding: 8px 16px;
  color: white;
  font-weight: bold;
  font-family: "Segoe UI", sans-serif;
  font-size: 14px;
  letter-spacing: 1px;
  text-transform: uppercase;
  text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  border-radius: 6px;
  transition: transform 0.2s ease, box-shadow 0.3s ease, background 0.3s ease;
  animation: pulse-glow 2s infinite ease-in-out;
  cursor: pointer;
}

/* Hover effect for the Update button */
#updateNodesButton:hover {
  background: linear-gradient(45deg, color-mix(in srgb, var(--theme-color) 80%, white), var(--theme-color));
  box-shadow: 0 0 15px var(--theme-color), 0 0 25px var(--theme-color);
  transform: scale(1.05);
}

/* Disabled state for the Update button */
#updateNodesButton:disabled {
  background: linear-gradient(45deg, #555, #777);
  box-shadow: none;
  transform: none;
  animation: none;
  cursor: not-allowed;
}

/* Pulsing glow animation for the Update button */
@keyframes pulse-glow {
  0% {
    box-shadow: 0 0 5px var(--theme-color);
  }
  50% {
    box-shadow: 0 0 15px var(--theme-color), 0 0 25px var(--theme-color);
  }
  100% {
    box-shadow: 0 0 5px var(--theme-color);
  }
}

.circle {
  width: 160px;
  height: 160px;
  border-radius: 50%;
  border: 4px solid var(--theme-color);
  box-shadow: 0 0 20px var(--theme-color), 0 0 40px var(--theme-color) inset;
  background: radial-gradient(circle at center, color-mix(in srgb, var(--theme-color) 20%, transparent), transparent);
  position: absolute;
}

.center {
  width: 380px;
  height: 380px;
  position: absolute;
}

.elemental-tab-wrapper {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: 40px;
}

.circle-controls {
  flex: 0 0 220px;
  padding: 1em;
  background-color: rgba(0, 0, 0, 0.3);
  border-radius: 8px;
  color: var(--theme-color);
  font-family: "Segoe UI", sans-serif;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 0.5em;
}

.circle-controls label {
  font-weight: bold;
}

.circle-controls input[type="number"] {
  width: 100%;
  padding: 0.3em;
  border-radius: 4px;
  border: 1px solid var(--theme-color);
  background: rgba(0, 0, 0, 0.5);
  color: var(--theme-color);
}

.circle-controls input[type="color"] {
  width: 100%;
  height: 30px;
  padding: 0;
  border: none;
  border-radius: 4px;
  background: rgba(0, 0, 0, 0.5);
  cursor: pointer;
}

.circle-controls button {
  width: 100%;
  padding: 0.4em;
  border-radius: 4px;
  background-color: var(--theme-color);
  color: #000;
  font-weight: bold;
  border: none;
  cursor: pointer;
  transition: background 0.2s ease;
}

.circle-controls button:hover {
  background-color: color-mix(in srgb, var(--theme-color) 80%, white);
}

/* Add transitions for position and size changes */
.circle {
  transition: left 0.5s ease, top 0.5s ease, width 0.5s ease, height 0.5s ease, opacity 0.5s ease;
}

/* Animation for node creation (growing from small to full size) */
.circle.node-create {
  animation: grow 0.5s ease forwards;
}

/* Animation for node removal (shrinking to disappear) */
.circle.node-remove {
  animation: shrink 0.5s ease forwards;
}

@keyframes grow {
  from {
    width: 0;
    height: 0;
    opacity: 0;
  }
  to {
    width: 160px;
    height: 160px;
    opacity: 1;
  }
}

@keyframes shrink {
  from {
    width: 160px;
    height: 160px;
    opacity: 1;
  }
  to {
    width: 0;
    height: 0;
    opacity: 0;
  }
}

.circle[data-feature-id] {
  transition: box-shadow 0.3s ease;
}

.circle[data-feature-id]:hover {
  box-shadow: 0 0 30px var(--theme-color), 0 0 50px var(--theme-color) inset;
}

/* Dormant state: grey overlay and no glow */
.node-dormant {
  position: relative;
  border: 4px solid #333 !important;
  box-shadow: none !important;
}

/* Use a pseudo-element for the dark overlay in dormant state */
.node-dormant::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 50%;
}

/* Corrupted state: dark overlay with animated cracks and pulsing red aura */
.node-corrupted {
  position: relative;
  animation: pulse-corrupted 2s infinite ease-in-out;
}

/* Dark overlay for corrupted state */
.node-corrupted::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  border-radius: 50%;
  z-index: 1;
}

/* Animated cracks for corrupted state */
.node-corrupted::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cpath d='M10 10 L30 50 L10 90 M30 50 L50 30 M30 50 L50 70 M50 30 L70 10 M50 70 L70 90 M70 10 L90 50 M70 90 L90 50' stroke='rgba(255, 0, 0, 0.5)' stroke-width='3' fill='none'/%3E%3C/svg%3E")
    center center / cover;
  border-radius: 50%;
  z-index: 2;
  animation: crack-flicker 1.5s infinite ease-in-out;
}

/* Pulsing red aura for corrupted state */
@keyframes pulse-corrupted {
  0% {
    box-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
  }
  50% {
    box-shadow: 0 0 20px rgba(255, 0, 0, 0.8);
  }
  100% {
    box-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
  }
}

/* Flickering effect for cracks */
@keyframes crack-flicker {
  0% {
    opacity: 0.6;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0.6;
  }
}

/* Ensure the input field and element name remain visible above the corrupted overlay */
.circle input,
.element-name {
  position: relative;
  z-index: 3;
  color: var(--theme-color); /* Use theme color in awakened state */
  text-shadow: 0 0 5px black;
}

/* Dormant state for input field */
.node-dormant input {
  color: #888; /* Greyed out in dormant state */
  text-shadow: none;
  cursor: not-allowed;
}

/* Hover effect for input when node is awakened */
.circle:not(.node-dormant) input:hover {
  text-shadow: 0 0 10px var(--theme-color), 0 0 15px var(--theme-color);
  transform: scale(1.05);
}

/* Style for the element name */
.element-name {
  color: var(--theme-color);
  font-size: 11px;
  font-family: "Segoe UI", sans-serif;
  font-weight: bold;
  text-shadow: 0 0 5px var(--theme-color);
  text-align: center;
  margin-top: 5px;
  z-index: 1;
  max-width: 140px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  cursor: pointer;
  transition: text-shadow 0.3s ease, transform 0.2s ease;
}

/* Hover effect for element name when node is awakened */
.circle:not(.node-dormant) .element-name:hover {
  text-shadow: 0 0 10px var(--theme-color), 0 0 15px var(--theme-color);
  transform: scale(1.05);
}

/* Dormant state for element name */
.node-dormant .element-name {
  color: #666;
  text-shadow: none;
  cursor: not-allowed;
}

/* New layer for spinning circles inside the main circle */
.vortex-circles {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0.5;
  clip-path: circle(48% at 50% 50%);
  animation: spin-circles 20s linear infinite;
}

/* Keyframes for the spinning circles with pulsing effect */
@keyframes spin-circles {
  0% {
    transform: rotate(0deg) scale(1);
    opacity: 0.6;
  }
  50% {
    transform: rotate(-180deg) scale(0.9);
    opacity: 0.4;
  }
  100% {
    transform: rotate(-360deg) scale(1);
    opacity: 0.6;
  }
}

/* Styles for the custom elemental roll chat message */
.elemental-roll {
  background: rgba(0, 0, 0, 0.8);
  border: 2px solid var(--theme-color);
  border-radius: 8px;
  padding: 10px;
  margin: 5px 0;
  box-shadow: 0 0 10px var(--theme-color);
  font-family: "Segoe UI", sans-serif;
  color: #fff;
}

.elemental-roll .roll-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--theme-color);
  padding-bottom: 5px;
  margin-bottom: 10px;
}

.elemental-roll .roll-header h2 {
  margin: 0;
  font-size: 16px;
  color: var(--theme-color);
  text-shadow: 0 0 5px var(--theme-color);
}

.elemental-roll .roll-header .roll-type {
  font-size: 12px;
  font-style: italic;
  color: #ccc;
}

.elemental-roll .roll-content {
  text-align: center;
}

.elemental-roll .roll-formula {
  font-size: 14px;
  color: #ddd;
  margin-bottom: 5px;
}

.elemental-roll .roll-result {
  font-size: 24px;
  font-weight: bold;
  color: var(--theme-color);
  text-shadow: 0 0 8px var(--theme-color);
}

/* Styles for the node hover pad */
.node-hover-pad {
  background: rgba(0, 0, 0, 0.9);
  border: 2px solid var(--theme-color);
  border-radius: 8px;
  padding: 10px;
  width: 200px;
  box-shadow: 0 0 5px var(--theme-color), 0 0 10px var(--theme-color) inset;
  color: #fff;
  font-family: "Segoe UI", sans-serif;
  animation: shimmer 1.5s infinite ease-in-out;
  z-index: 1000;
  position: relative;
  overflow: hidden; /* Ensure neon lines don't overflow */
}

/* Digital animation background with marching neon lines */
.node-hover-pad::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent 0%, transparent 40%, var(--theme-color) 50%, transparent 60%, transparent 100%);
  background-size: 200% 100%;
  opacity: 0.3;
  z-index: 1;
  animation: march-neon 3s infinite linear;
  border-radius: 8px; /* Match the hover pad's border-radius */
}

/* Animation for marching neon lines */
@keyframes march-neon {
  0% {
    background-position: 0% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

.node-hover-pad .hover-pad-header {
  font-size: 14px;
  font-weight: bold;
  color: var(--theme-color);
  text-shadow: 0 0 5px var(--theme-color);
  border-bottom: 1px solid var(--theme-color);
  padding-bottom: 5px;
  margin-bottom: 10px;
}

.node-hover-pad .hover-pad-content {
  font-size: 12px;
}

.node-hover-pad .hover-pad-content p {
  margin: 5px 0;
}

.node-hover-pad .hover-pad-content strong {
  color: var(--theme-color);
}

/* Shimmer effect for awakened state with reduced intensity */
@keyframes shimmer {
  0% {
    box-shadow: 0 0 5px var(--theme-color);
  }
  50% {
    box-shadow: 0 0 10px var(--theme-color), 0 0 15px var(--theme-color) inset;
  }
  100% {
    box-shadow: 0 0 5px var(--theme-color);
  }
}

/* Dormant state for hover pad */
.node-hover-pad.node-dormant {
  background: rgba(0, 0, 0, 0.5);
  border: 2px solid #333;
  box-shadow: none;
  animation: none;
}

.node-hover-pad.node-dormant::before {
  display: none; /* Disable neon lines in dormant state */
}

.node-hover-pad.node-dormant::after {
  border-radius: 8px; /* Override the circular border-radius for hover pad */
}

.node-hover-pad.node-dormant .hover-pad-header {
  color: #888;
  text-shadow: none;
  border-bottom: 1px solid #333;
}

.node-hover-pad.node-dormant .hover-pad-content strong {
  color: #888;
}

/* Corrupted state for hover pad */
.node-hover-pad.node-corrupted {
  position: relative;
  animation: pulse-corrupted 2s infinite ease-in-out;
}

.node-hover-pad.node-corrupted::before {
  /* Keep the neon lines visible in corrupted state */
  z-index: 1;
}

.node-hover-pad.node-corrupted::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cpath d='M10 10 L30 50 L10 90 M30 50 L50 30 M30 50 L50 70 M50 30 L70 10 M50 70 L70 90 M70 10 L90 50 M70 90 L90 50' stroke='rgba(255, 0, 0, 0.5)' stroke-width='3' fill='none'/%3E%3C/svg%3E")
    center center / cover;
  border-radius: 8px; /* Override the circular border-radius for hover pad */
  z-index: 2;
  animation: crack-flicker 1.5s infinite ease-in-out;
}

/* Ensure hover pad content remains visible above corruption overlay and neon lines */
.node-hover-pad .hover-pad-header,
.node-hover-pad .hover-pad-content {
  position: relative;
  z-index: 3;
}

/* Styles for the Element rules info bubble */
.element-rules-info {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2; /* Above vortex-circles but below nodes */
}

.element-rules-info .info-icon {
  display: block;
  color: var(--theme-color);
  font-size: 20px;
  font-family: "Segoe UI", sans-serif;
  font-weight: bold;
  text-shadow: 0 0 5px var(--theme-color);
  opacity: 0.5;
  animation: pulse-icon 2s infinite ease-in-out;
  cursor: pointer;
  transition: opacity 0.3s ease;
}

.element-rules-info .info-icon:hover {
  opacity: 1;
}

/* Pulsing animation for the info icon */
@keyframes pulse-icon {
  0% {
    opacity: 0.5;
  }
  50% {
    opacity: 0.8;
  }
  100% {
    opacity: 0.5;
  }
}

.element-rules-info .info-tooltip {
  display: none;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.85);
  border: 2px solid var(--theme-color);
  border-radius: 8px;
  padding: 15px;
  width: 300px;
  color: #fff;
  font-family: "Segoe UI", sans-serif;
  z-index: 1001; /* Above everything else */
  box-shadow: 0 0 10px var(--theme-color), 0 0 20px var(--theme-color) inset;
  animation: hologram-appear 0.5s ease forwards, hologram-flicker 2s infinite ease-in-out;
  opacity: 0;
}

/* Holographic appearance animation */
@keyframes hologram-appear {
  0% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.8);
  }
  100% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
}

/* Holographic flicker animation */
@keyframes hologram-flicker {
  0% {
    opacity: 1;
  }
  2% {
    opacity: 0.7;
  }
  4% {
    opacity: 1;
  }
  100% {
    opacity: 1;
  }
}

.element-rules-info:hover .info-tooltip {
  display: block;
}

.element-rules-info .info-tooltip h4 {
  margin: 0 0 10px 0;
  font-size: 16px;
  color: var(--theme-color);
  text-shadow: 0 0 5px var(--theme-color);
  text-align: center;
}

.element-rules-info .info-tooltip ul {
  margin: 0;
  padding: 0 0 0 15px;
  font-size: 12px;
}

.element-rules-info .info-tooltip li {
  margin-bottom: 5px;
}

.element-rules-info .info-tooltip strong {
  color: var(--theme-color);
}
